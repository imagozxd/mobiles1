//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/scripts/scripts mejora/TouchCrontroller.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TouchCrontroller: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TouchCrontroller()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TouchCrontroller"",
    ""maps"": [
        {
            ""name"": ""TouchMap"",
            ""id"": ""36621f7f-6a11-4fb6-a704-aa1c7355af23"",
            ""actions"": [
                {
                    ""name"": ""TouchStart "",
                    ""type"": ""Button"",
                    ""id"": ""5e2aae5f-a91d-48ed-98f0-029056ce3a4e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchPosition "",
                    ""type"": ""Value"",
                    ""id"": ""5fb95314-2515-467a-9a19-0507ba1dbb34"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TouchEnd "",
                    ""type"": ""Button"",
                    ""id"": ""3ae71cc9-7d7a-46e5-8629-c3a759948cb9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ec3e4c0f-e8cc-4b69-99d0-78c9de362a2e"",
                    ""path"": ""<Touchscreen>/primaryTouch/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchStart "",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b9f5ff3e-d685-41fc-a44d-6bbbceee0021"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPosition "",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""14ee8562-cdfd-4f62-b4c7-ec60d4430921"",
                    ""path"": ""<Touchscreen>/primaryTouch/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchEnd "",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // TouchMap
        m_TouchMap = asset.FindActionMap("TouchMap", throwIfNotFound: true);
        m_TouchMap_TouchStart = m_TouchMap.FindAction("TouchStart ", throwIfNotFound: true);
        m_TouchMap_TouchPosition = m_TouchMap.FindAction("TouchPosition ", throwIfNotFound: true);
        m_TouchMap_TouchEnd = m_TouchMap.FindAction("TouchEnd ", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TouchMap
    private readonly InputActionMap m_TouchMap;
    private List<ITouchMapActions> m_TouchMapActionsCallbackInterfaces = new List<ITouchMapActions>();
    private readonly InputAction m_TouchMap_TouchStart;
    private readonly InputAction m_TouchMap_TouchPosition;
    private readonly InputAction m_TouchMap_TouchEnd;
    public struct TouchMapActions
    {
        private @TouchCrontroller m_Wrapper;
        public TouchMapActions(@TouchCrontroller wrapper) { m_Wrapper = wrapper; }
        public InputAction @TouchStart => m_Wrapper.m_TouchMap_TouchStart;
        public InputAction @TouchPosition => m_Wrapper.m_TouchMap_TouchPosition;
        public InputAction @TouchEnd => m_Wrapper.m_TouchMap_TouchEnd;
        public InputActionMap Get() { return m_Wrapper.m_TouchMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchMapActions set) { return set.Get(); }
        public void AddCallbacks(ITouchMapActions instance)
        {
            if (instance == null || m_Wrapper.m_TouchMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TouchMapActionsCallbackInterfaces.Add(instance);
            @TouchStart.started += instance.OnTouchStart;
            @TouchStart.performed += instance.OnTouchStart;
            @TouchStart.canceled += instance.OnTouchStart;
            @TouchPosition.started += instance.OnTouchPosition;
            @TouchPosition.performed += instance.OnTouchPosition;
            @TouchPosition.canceled += instance.OnTouchPosition;
            @TouchEnd.started += instance.OnTouchEnd;
            @TouchEnd.performed += instance.OnTouchEnd;
            @TouchEnd.canceled += instance.OnTouchEnd;
        }

        private void UnregisterCallbacks(ITouchMapActions instance)
        {
            @TouchStart.started -= instance.OnTouchStart;
            @TouchStart.performed -= instance.OnTouchStart;
            @TouchStart.canceled -= instance.OnTouchStart;
            @TouchPosition.started -= instance.OnTouchPosition;
            @TouchPosition.performed -= instance.OnTouchPosition;
            @TouchPosition.canceled -= instance.OnTouchPosition;
            @TouchEnd.started -= instance.OnTouchEnd;
            @TouchEnd.performed -= instance.OnTouchEnd;
            @TouchEnd.canceled -= instance.OnTouchEnd;
        }

        public void RemoveCallbacks(ITouchMapActions instance)
        {
            if (m_Wrapper.m_TouchMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITouchMapActions instance)
        {
            foreach (var item in m_Wrapper.m_TouchMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TouchMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TouchMapActions @TouchMap => new TouchMapActions(this);
    public interface ITouchMapActions
    {
        void OnTouchStart(InputAction.CallbackContext context);
        void OnTouchPosition(InputAction.CallbackContext context);
        void OnTouchEnd(InputAction.CallbackContext context);
    }
}
