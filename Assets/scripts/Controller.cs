//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/scripts/Controller.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controller: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controller()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controller"",
    ""maps"": [
        {
            ""name"": ""Base"",
            ""id"": ""9f74156f-d827-4539-84a2-53337c5fa476"",
            ""actions"": [
                {
                    ""name"": ""tap"",
                    ""type"": ""Button"",
                    ""id"": ""4a5de530-e2f3-4a6c-af21-615d57f152c1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""double tap"",
                    ""type"": ""Button"",
                    ""id"": ""b6c079c6-3b54-4666-a591-0cdef144cbd1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""swipe"",
                    ""type"": ""Button"",
                    ""id"": ""685ecf84-a0be-4189-96d6-fe0c1c52bd95"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""hold n drag "",
                    ""type"": ""Button"",
                    ""id"": ""6b80cb8b-0d9a-4ee1-8fdc-437c3d9e068f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1b829f43-694d-4f6e-ade2-61b77f8a6792"",
                    ""path"": ""<Touchscreen>/primaryTouch/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c3f0727a-7dba-4252-bb67-dd658c370101"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""double tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""04bd1eb7-d0ab-4fb4-8ec4-af1f80c9c95f"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""swipe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""76ac0dde-d624-4a67-94d8-2199d9201991"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""hold n drag "",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Base
        m_Base = asset.FindActionMap("Base", throwIfNotFound: true);
        m_Base_tap = m_Base.FindAction("tap", throwIfNotFound: true);
        m_Base_doubletap = m_Base.FindAction("double tap", throwIfNotFound: true);
        m_Base_swipe = m_Base.FindAction("swipe", throwIfNotFound: true);
        m_Base_holdndrag = m_Base.FindAction("hold n drag ", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Base
    private readonly InputActionMap m_Base;
    private List<IBaseActions> m_BaseActionsCallbackInterfaces = new List<IBaseActions>();
    private readonly InputAction m_Base_tap;
    private readonly InputAction m_Base_doubletap;
    private readonly InputAction m_Base_swipe;
    private readonly InputAction m_Base_holdndrag;
    public struct BaseActions
    {
        private @Controller m_Wrapper;
        public BaseActions(@Controller wrapper) { m_Wrapper = wrapper; }
        public InputAction @tap => m_Wrapper.m_Base_tap;
        public InputAction @doubletap => m_Wrapper.m_Base_doubletap;
        public InputAction @swipe => m_Wrapper.m_Base_swipe;
        public InputAction @holdndrag => m_Wrapper.m_Base_holdndrag;
        public InputActionMap Get() { return m_Wrapper.m_Base; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BaseActions set) { return set.Get(); }
        public void AddCallbacks(IBaseActions instance)
        {
            if (instance == null || m_Wrapper.m_BaseActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BaseActionsCallbackInterfaces.Add(instance);
            @tap.started += instance.OnTap;
            @tap.performed += instance.OnTap;
            @tap.canceled += instance.OnTap;
            @doubletap.started += instance.OnDoubletap;
            @doubletap.performed += instance.OnDoubletap;
            @doubletap.canceled += instance.OnDoubletap;
            @swipe.started += instance.OnSwipe;
            @swipe.performed += instance.OnSwipe;
            @swipe.canceled += instance.OnSwipe;
            @holdndrag.started += instance.OnHoldndrag;
            @holdndrag.performed += instance.OnHoldndrag;
            @holdndrag.canceled += instance.OnHoldndrag;
        }

        private void UnregisterCallbacks(IBaseActions instance)
        {
            @tap.started -= instance.OnTap;
            @tap.performed -= instance.OnTap;
            @tap.canceled -= instance.OnTap;
            @doubletap.started -= instance.OnDoubletap;
            @doubletap.performed -= instance.OnDoubletap;
            @doubletap.canceled -= instance.OnDoubletap;
            @swipe.started -= instance.OnSwipe;
            @swipe.performed -= instance.OnSwipe;
            @swipe.canceled -= instance.OnSwipe;
            @holdndrag.started -= instance.OnHoldndrag;
            @holdndrag.performed -= instance.OnHoldndrag;
            @holdndrag.canceled -= instance.OnHoldndrag;
        }

        public void RemoveCallbacks(IBaseActions instance)
        {
            if (m_Wrapper.m_BaseActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBaseActions instance)
        {
            foreach (var item in m_Wrapper.m_BaseActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BaseActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BaseActions @Base => new BaseActions(this);
    public interface IBaseActions
    {
        void OnTap(InputAction.CallbackContext context);
        void OnDoubletap(InputAction.CallbackContext context);
        void OnSwipe(InputAction.CallbackContext context);
        void OnHoldndrag(InputAction.CallbackContext context);
    }
}
